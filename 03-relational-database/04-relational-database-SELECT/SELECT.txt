
-----------------------------------------
1. Write out a generic SELECT statement.

  SELECT <table column>
  FROM <table name>
  WHERE <condition is met>;

-----------------------------------------
2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

 "S-F-W" "SELECT" column first, "Find" the table name, "Where" this condition is met

-----------------------------------------
3. Given this dogs table, write queries to select the following pieces of data:
  + Display the name, gender, and age of all dogs that are part Labrador.

    + Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

    SELECT name, gender, age
    FROM dogs
    WHERE breed LIKE '%labrador%';

  + Display the ids of all dogs that are under 1 year old.
    SELECT id
    FROM dogs
    WHERE age < 1;

  + Display the name and age of all dogs that are female and over 35lbs.
    SELECT name, age
    FROM dogs
    WHERE gender='F'
    AND weight > 35;

  + Display all of the information about all dogs that are not Shepherd mixes.
    SELECT * 
    FROM dogs
    WHERE breed NOT like '%shepherd';

  + Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
    SELECT id, age, weight, breed
    FROM dogs
    WHERE weight > 60
    OR breed='great danes';

-----------------------------------------
4. Given this cats table, what records are returned from these queries?
  + SELECT name, adoption_date FROM cats;
       name   | adoption_date 
    ----------+---------------
     Mushi    | 2016-03-22
     Seashell | 
     Azul     | 2016-04-17
     Victoire | 2016-09-01
     Nala     | 
    (5 rows)

  + SELECT name, age FROM cats;
       name   | age 
    ----------+-----
     Mushi    |   1
     Seashell |   7
     Azul     |   3
     Victoire |   7
     Nala     |   1
    (5 rows)

-----------------------------------------
5. From the cats table, write queries to select the following pieces of data.
  + Display all the information about all of the available cats.
    SELECT *
    FROM cats;

  + Display the name and sex of all cats who are 7 years old.
    SELECT name, gender
    FROM cats
    WHERE age=7;

  + Find all of the names of the cats, so you don’t choose duplicate names for new cats.
    SELECT DISTINCT ON (name) name
    FROM cats;

-----------------------------------------
6. List each comparison operator and explain, in your own words, when you would use it. Include a real world example for each.
  + If you can’t list these from memory, do these flashcards until you can!
  1. >       | greater than, when comparing 2 values                   | EXAMPLE: age > 21
  2. <       | less than, when comparing 2 values                      | EXAMPLE: age < 65
  3. =       | equal to, used when comparing 2 values                  | EXAMPLE: dolphin = mammal
  4. <=      | less than or equal to, when comparing 2 values          | EXAMPLE: age <= 5
  5. >=      | great than or equal to, when comparing 2 values         | EXAMPLE: age >= 40
  6. !=      | not equal to, used when comparing 2 values              | EXAMPLE: fish != mammal
  7. <>      | it means "not equal", either less than or greater than  | EXAMPLE: If x <> y Then 
               READS: if x is less than y or x is greater than y then
               Logical Outcome: "If x is anything except equal to y"
  8. !<  | checks if the value on the left of the operand is NOT less than the value on the right operand, if yes than condition becomes true
  9. !>  | checks if the value on the left operand is NOT greater than the value on the right operand, if yes than condition becomes true
  10. %   | used at the beg, both front and back and last part of a word
      (1) %Heart = Heart of the Tiger | (2) %Heart% = Home is where the heart is | (3) Hearts% = Breaking Hearts
  11. LIKE    | used to pattern match a string                           | EXAMPLE: input LIK 'cat'
  12. BETWEEN | The BETWEEN operator selects values within a given range | EXAMPLE: "a BETWEEN x AND y" => 
               "a >= x AND a <= y"
  13. IS DISTINCT FROM | expression IS DISTINCT FROM expression | EXAMPLE:
  14. IS TRUE / IS FALSE | Boolean must be true or false | EXAMPLE: expression is TRUE (where the input could be null) will always return true or false
  15. IS NULL | determines if the contents in the cell are null | EXAMPLE: Not a Boolean, which means, not true or false
  16. AND | requires both expressions to be true for the row to be returned | EXAMPLE: Food can be healthy AND tasty
  17. OR | requires one of the expressions to be true for the row to be returned | EXAMPLE: Do you like cats OR dogs
  18. NOT | Requires the expression to be false for the row to be returned | EXAMPLE: Apples, NOT bananas

-----------------------------------------
7. From the cats table, what data is returned from these queries?
  + SELECT name FROM cats WHERE gender = 'F';
       name   
    ----------
     Seashell
     Nala
    (2 rows)

  + SELECT name FROM cats WHERE age <> 3;
       name   
    ----------
     Mushi
     Seashell
     Victoire
     Nala
    (4 rows)

  + SELECT id FROM cats WHERE name != 'Mushi' AND gender = 'M';
     id 
    ----
      3
      4
    (2 rows)
