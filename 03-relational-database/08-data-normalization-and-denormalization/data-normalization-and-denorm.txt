--------------------------
1. In your own words, explain the benefits of normalization. Include a real-world scenario where normalization is necessary.
--------------------------
    Normalization allows for the lack of redundancy and imporoves the integrity of the data within tables.

    For example, lets use the example of a cutomer's home address from a billing company. Instead of cramming all the information for a single into one column, by using the design of normalization we can separate-out the different attributes that way later we are more efficient at finding a home by just the street number, or either look-up by a single zip-code.

    --------------------------
    For example
    --------------------------

    | Customer_Address                      |
    | ------------------------------------- |
    |'216 Cherry Hill Rd, Carrol, CA, 21509'|
    |'45 Light St, Sail City, WY, 25906'    |
    |'12 Comet Blvd, Orange City, WY, 25906'|
    |'12 Redwood St, Yellar, CA, 21529'     |

    --------------------------
    Normalization
    --------------------------

    | Customer_Address    | Apt_Num | County   | City          | State | Zip_Code |
    | ------------------- | ------- | -------- | ------------- | ----- | -------- |
    |'216 Cherry Hill Rd' |         | 'Carrol' |               | 'CA'  | 21509    |
    |'45 Light St'        | 504     |          | 'Sail City'   | 'WY'  | 25906    |
    |'12 Comet Blvd'      | 240     |          | 'Orange City' | 'WY'  | 25906    |
    |'12 Redwood St'      |         | 'Yellar' |               | 'CA'  | 21529    |

    Table 2 ensures data integrity because one is able to locate a single aspect of an address for a quick look-up, easy replacement, and better readability.

--------------------------
2. List and explain the different normal forms and how they relate to one another, with regard to your real-world scenario in the first question.
--------------------------
    There are 4 different normal forms: 1NF, 2NF, 3NF, BCNF. The normal forms relate to one another because they almost piffy-back on to the next form. For example, the heirachy of the form rules, is the rule from the previous form, plus its own additional (more strict) rule(s).

    --------------------------
    1NF
    --------------------------
    : 1NF - is to have one piece of data in each column. This should be easy to located because data would otherwise be separated by commas.

    --------------------------
    For example
    --------------------------

    | Street_Address                                                  |
    | --------------------------------------------------------------- |
    | '216 Cherry Hill Rd, 45 Light St, 12 Comet Blvd, 12 Redwood St' |

    For this^ table to comply with 1NF, each piece of data separated by a comma, becomes whole pieces of a new data set.

    | Street_Address       |
    | -------------------- |
    | '216 Cherry Hill Rd' |
    | '45 Light St'        |
    | '12 Comet Blvd'      |
    | '12 Redwood St'      |

    --------------------------
    2NF
    --------------------------
    : 2NF - The table must be in 1NF, plus, non-key attributes cannot be independent on a subset of the primary key.

    --------------------------
    For example
    --------------------------

    Table 1:
    | Name | House_Build | Cash |
    | ---- | ----------- | ---- |

    When a realtor is looking at a home for an individual - 'Name' relates to 'House_Build' because the buyer prefers a certain type of build to purchase. This data then helps the realtor to include this data in the search for a new home. At no circumstance would the realtor relate 'House_Build' with 'Cash' because those two (non-keys) are missing the primary-key 'Name' which is needed for the data to become relational.

    To comply with 2NF, this table^ will become two tables. Each of the tables will become: primary key -> non-key.

    Table 1:
    | Name | House_Build |
    | ---- | ----------- |

    Table 2:
    | Name | Cash |
    | ---- | ---- |

    --------------------------
    3NF
    --------------------------
    : 3NF - The table must be in 2NF, plus, all transitive functional depedencies of non-prime attributes must not exist, meaning you cannot have transitive relationships between non-prime attributes aka a non-key can not have a transitive depdendency with another non-key, unless broken into a separate table!

    --------------------------
    For example
    --------------------------

    Table 1:
    | Name | Co_Signer | Cash | Age | Community |
    |----- | --------- | ---- | --- | --------- |

    'Community' is depdendent on 'Age' because when the indivudal looks for a 55+ age community, (having age restrictions), these two (non-keys) have a transitive depdendency relationship, which is not compliant with 3NF, unless this table^ is re-configured. To comply with 3NF, the table will be broken into two separate tables of which all non-keys will only have a transitive dependency with the primary-key.

    Table 1:
    | Name | Co_Signer | Cash | Age |
    |----- | --------- | ---- | --- |

    Table 2:
    | Name | Age | Community |
    |----- | --- | --------- |

    We now know that our newly configured table meets 3NF because 'Co_Signer', 'Cash', and 'Age' are all non-keys that *only* have a transitive depdendency on the primary-key. We then take our 'Community' data and place it into a new table with the primary-key, in addition to the transitive depdendency non-key. This now takes (the original) Table 1 and turns into a compliable 3NF, (which now uses 2 tables).

    --------------------------
    BCNF
    --------------------------
    : BCNF (Boyce Codd normal form), is an advanced version of 3NF, plus, every dependency must be a super key of the table. (*A super key is a set of attributes within a table whose values can be used to uniquely identify all other attributes.*)

    --------------------------
    For example
    --------------------------

    Table 1:
    | Name | Co_Signer | Cash | Age | Community |
    |----- | --------- | ---- | --- | --------- |

    becomes:

    Table 1:
    | Name | Co_Signer | Cash |
    |----- | --------- | ---- |

    Table 2:
    | Age | Community |
    |---- | --------- |

    To comply with BCNF, the non-key transitive dependency has been separated from the original table (complies with 3NF), and instead of creating a new table using the primary key (as the super key), within the second table, the non-key (which has a transitive dependency with the other non-key) is now magically made the super key! Notice how the second table is made with just the candidate keys, however this time one of them was made into a super key!!

--------------------------
3. This student_records table contains students and their grades in different subjects. The schema is already in first normal form (1NF). Convert this schema to the third normal form (3NF) using the techniques you learned in this checkpoint.
--------------------------

    --------------------------
    original from table:
    --------------------------
    | student_records |
    | --------------- |
    | id              |
    | student_id      |
    | student_email   |
    | student_name    |
    | professor_id    |
    | professor_name  |
    | subject         |
    | grade           |


    --------------------------
    Normalized into 3NF:
    --------------------------
    | students     | professors     | subjects     | grades        |
    | ------------ | -------------- | ------------ | ------------- |
    | id           | id             | id           | id            |
    | student_name | professor_name | subject_name | grade         |
    |              |                |              | students.id   |
    |              |                |              | professors.id |
    |              |                |              | subjects.id   |

--------------------------
4. In your own words, explain the potential disadvantages of normalizing the data above. What are its trade-offs? Submit your findings in the submission table and discuss them with your mentor in your next session.
--------------------------
    Although normalizing reduces redundancy in code and improves the integrity of the data, there are still potential negative factors. The trade-offs to normalization would be creating more tables, increasing the performance time, and also increasing the amount of joins to make relationships across the tables. Not to mention, a normalized database is difficult and expensive to design.

--------------------------
5. Looking at the tables you have normalized. If you need to denormalize to improve query performance or speed up reporting, how would you carry out denormalization for this database design? Submit potential strategies in the submission tab and discuss them with your mentor in your next session.
--------------------------
    Methods to denomalize the data could be any of the following: adding redundant groups, adding derived columns, combining tables, repeating groups, creating extract tables, partitioning relations.

--------------------------
6. Explore the trade-offs between data normalization and denormalization in this scenario, submit your findings in the submission tab, and discuss them with your mentor in your next session.
    Already mentioned above for each ^

    Normalization reduces redundancy and improves data integrity by organizing columns and tables in a relational database. There are 4 different ways by which to organize these tables, (1NF, 2NF, 3NF, Boyce Codd NF). Although normalization purpose is to reduce redundancy and improve data integrity the process of organizing the data, creates more tables, thus creating an increase in performance time, since more tables will need to be joined.

    Denormalization is often motivated by performance or scalability in relational databse softwares needed to carry out very large numbers of read operations. Denormalization techniques are often used to improve the scalability of Web Applications. Methods to denomalization are: adding redundant groups, adding derived columns, combining tables, repeating groups, creating extract tables, partitioning relations.

    Advantages to Denormalization: 
    (1) To enhance query performance.
      + A normalized database requires joining a lot of tables to fetch queries, the more joins, the slower the query.
    (2) To make a database more convenient to manage.
      + Denormalized databases have calculated values that are essential for applications, once they're generated and added to tables, downstream programmers can easily create their own reports and queries without having in-depth knowledge of the app's code or API.
    (3) To facilitate and accelerate reporting.
      + Denormalizing your database can meet the challenge of running a live report without negatively impacting overall system performance.
      + For example, normalized database would aggregate and calculate all invoice details multiple times, this is time-consuming! To speed up the process, using a denormalized database, you could instead maintain the year-to-date sales summary in a table storying user details.