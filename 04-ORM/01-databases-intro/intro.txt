Exercise:
For each below write pseudo-code & also write a corresponding SQL statement.

***************************************************************
1. remove duplicates in a query response:

    ORM: User.select(:name).distinct
    SQL: SELECT DISTINCT name FROM users;

***************************************************************
2. filter records using inequalities, pattern matching, ranges, and boolean logic:

  --------------------------
  Inequality
  --------------------------

    ORM: Supplier.where.not(supplier_name: 'Microsoft')
    SQL: SELECT * FROM suppliers WHERE supplier_name <> 'Microsoft';

  --------------------------
  Equality
  --------------------------

    ORM: Client.where("orders_count = '2'")
    SQL: SELECT * FROM clients WHERE orders_count = '2';

  --------------------------
  Pattern Matching
  --------------------------

    ORM: Person.where('name LIKE ?', '%' + query + '%')
    SQL: SELECT * FROM people WHERE name LIKE '%foo%';

  --------------------------
  Ranges
  --------------------------

    ORM: User.scoped(:conditions => { :id => 3..5 })
    SQL: SELECT * FROM users WHERE (users.id BETWEEN 3 AND 5);


***************************************************************
3. sort records in a particular order

    ORM: User.order('name DESC, email')
    SQL: SELECT * FROM users ORDER BY name DESC, email;


***************************************************************
4. limit the number of records returned:

    ORM: User.limit(10)
    SQL: SELECT * FROM users LIMIT 10;

***************************************************************
5. group records into sections:

    ORM: User.group(:name)
    SQL: SELECT "users".* FROM "users" GROUP BY name;

***************************************************************
6. perform calculations using aggregate functions:

  --------------------------
  AVG
  --------------------------
    ORM: Person.average(:age)
    # => Calculates the average value on a given column
    SQL: SELECT AVG(age) AS AverageAge FROM people;

  --------------------------
  COUNT
  --------------------------
    ORM: Person.count(:age)
    # => returns the total count of all people whose age is present in database
    SQL: SELECT COUNT(age) TotalCountWhoSuppliedTheirAge FROM people;

  --------------------------
  MIN
  --------------------------
    ORM: Person.minimum(:age)
    # => Calculates the minimum value on a given column
    SQL: SELECT MIN(age) AS YoungestAge FROM people;

  --------------------------
  MAX
  --------------------------
    ORM: Person.maximum(:age)
    # => Calculates the maximum value on a given column
    SQL: SELECT MAX(age) AS OldestAge FROM people;

  --------------------------
  SUM
  --------------------------
    ORM: Person.sum(:age)
    # => Calculates the sum of values on a given column
    SQL: SELECT SUM(age) AS AverageAge FROM people;


***************************************************************
7. join tables using cross join, inner join, and outer join:

    --------------------------
    CROSS JOIN: Produces a result set in which the number of rows in the first table are
    multiplies by the number of rows in the second table if no WHERE clause is used.
        + If the WHERE clause is used, it functions like an INNER JOIN.
    --------------------------

      ORM: User.find_by_sql("SELECT * FROM users CROSS JOIN categories")
      SQL: SELECT * FROM users CROSS JOIN categories;

    --------------------------
    INNER JOIN: Selects records that have matching values in both tables.
    --------------------------

      ORM: User.joins(:posts)
      SQL: SELECT "users".* FROM "users" INNER JOIN "posts" ON "posts"."user_id" = "users"."id"

    --------------------------
    OUTER JOIN: Returns all records when there is a match in either left (table1) or right
    (table2) table records.
    --------------------------

      ORM: User.left_outer_joins(:posts)
      SQL: SELECT "users".* FROM "users" LEFT OUTER JOIN "posts" ON "posts"."user_id" = "users"."id"

